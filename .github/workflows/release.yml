# =======================================================================
# AquaLytics MVP - Release Workflow
# =======================================================================
# 
# Workflow que se ejecuta cuando se crean tags de versión.
# Crea releases automáticos con changelog y artifacts.
#

name: 📦 Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags (v1.0.0, v1.2.3, etc.)

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8.x'

jobs:
  # ======================
  # BUILD RELEASE ARTIFACTS
  # ======================
  build-release:
    name: 🏗️ Build Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Necesario para generar changelog

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Instalar dependencias
        run: |
          # Frontend
          pnpm install --frozen-lockfile
          
          # Backend
          cd services/api
          pip install --upgrade pip
          pip install -e .

      - name: Build Frontend
        run: |
          cd apps/web
          pnpm build

      - name: Generar changelog
        id: changelog
        run: |
          # Obtener el tag anterior
          PREVIOUS_TAG=$(git tag --sort=-version:refname | sed -n '2p')
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generar changelog
          echo "## 🚀 Changes in ${{ github.ref_name }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Commits desde el último tag
          git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..${{ github.ref_name }} >> CHANGELOG.md
          
          # Leer changelog para el release
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Crear archivos de release
        run: |
          mkdir -p release-artifacts
          
          # Frontend build
          cd apps/web
          tar -czf ../../release-artifacts/frontend-build.tar.gz .next/ public/ package.json
          cd ../..
          
          # Backend source
          cd services/api
          tar -czf ../../release-artifacts/backend-source.tar.gz --exclude=__pycache__ --exclude=*.pyc app/ pyproject.toml
          cd ../..
          
          # Deployment configs
          tar -czf release-artifacts/deployment-configs.tar.gz \
            vercel.json \
            services/api/render.yaml \
            services/api/fly.toml \
            services/api/Dockerfile \
            VERCEL_SETUP.md \
            BACKEND_DEPLOYMENT.md

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/

    outputs:
      changelog: ${{ steps.changelog.outputs.CHANGELOG }}

  # ======================
  # CREAR GITHUB RELEASE
  # ======================
  create-release:
    name: 📋 Create Release
    runs-on: ubuntu-latest
    needs: build-release
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: AquaLytics ${{ github.ref_name }}
          body: |
            # 🏊‍♂️ AquaLytics MVP ${{ github.ref_name }}
            
            ## 📦 Release Assets
            
            - **frontend-build.tar.gz**: Build optimizado del frontend Next.js
            - **backend-source.tar.gz**: Código fuente del backend FastAPI  
            - **deployment-configs.tar.gz**: Configuraciones de deployment
            
            ## 🚀 Deployment
            
            Esta versión se despliega automáticamente en:
            - **Frontend**: https://aqualytics-mvp.vercel.app
            - **Backend**: https://aqualytics-api.onrender.com
            - **API Docs**: https://aqualytics-api.onrender.com/api/v1/docs
            
            ## 📝 Changelog
            
            ${{ needs.build-release.outputs.changelog }}
            
            ## 🛠️ Tech Stack
            
            - **Frontend**: Next.js 15, TypeScript, Tailwind CSS, shadcn/ui
            - **Backend**: FastAPI, Python 3.11, PostgreSQL/Supabase
            - **Deployment**: Vercel (Frontend) + Render (Backend)
            
            ---
            
            **🎯 AquaLytics MVP**: Plataforma de análisis de rendimiento para equipos de natación
            
          files: |
            release-artifacts/frontend-build.tar.gz
            release-artifacts/backend-source.tar.gz
            release-artifacts/deployment-configs.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true

  # ======================
  # NOTIFICAR RELEASE
  # ======================
  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [build-release, create-release]
    
    steps:
      - name: Release notification
        run: |
          echo "🎉 Nueva release creada: ${{ github.ref_name }}"
          echo "📦 GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "🌐 Frontend: https://aqualytics-mvp.vercel.app"
          echo "🔧 Backend: https://aqualytics-api.onrender.com"
