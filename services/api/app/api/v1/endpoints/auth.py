"""
Endpoints de autenticaci√≥n y usuario.

Maneja endpoints relacionados con autenticaci√≥n y gesti√≥n de usuarios seg√∫n PRD.
"""

from fastapi import APIRouter, status
from loguru import logger

from app.api.deps import CurrentUser, create_user_response
from app.schemas.auth import UsuarioResponse

# Router para endpoints de autenticaci√≥n
router = APIRouter()


@router.get(
    "/me",
    response_model=UsuarioResponse,
    status_code=status.HTTP_200_OK,
    summary="Obtener informaci√≥n del usuario actual",
    description="Retorna informaci√≥n completa del usuario autenticado, incluyendo rol y permisos seg√∫n PRD",
    response_description="Informaci√≥n del usuario con rol y permisos",
    tags=["autenticaci√≥n"]
)
async def get_current_user_info(
    current_user: CurrentUser,
) -> UsuarioResponse:
    """
    Endpoint GET /me seg√∫n especificaciones del PRD.
    
    Retorna informaci√≥n del usuario autenticado incluyendo:
    - Datos b√°sicos del usuario
    - Rol (entrenador/atleta)  
    - ID del equipo
    - Permisos espec√≠ficos seg√∫n el rol
    
    Args:
        current_user: Usuario actual (inyectado por dependency)
        
    Returns:
        UsuarioResponse: Informaci√≥n estructurada del usuario
    """
    logger.debug(f"üìã Solicitando informaci√≥n de usuario: {current_user.email}")
    
    # Crear respuesta estructurada usando helper function
    user_response = create_user_response(current_user)
    
    logger.debug(f"‚úÖ Informaci√≥n de usuario enviada para: {current_user.email} (rol: {current_user.rol})")
    
    return user_response


@router.get(
    "/health/auth",
    status_code=status.HTTP_200_OK,
    summary="Health check de autenticaci√≥n",
    description="Verifica el estado del sistema de autenticaci√≥n",
    tags=["health", "autenticaci√≥n"]
)
async def auth_health_check():
    """
    Health check espec√≠fico para el sistema de autenticaci√≥n.
    
    Verifica que:
    - La configuraci√≥n de JWT est√© presente
    - Supabase est√© configurado correctamente
    - El sistema de autenticaci√≥n est√© funcionando
    
    Returns:
        dict: Estado del sistema de autenticaci√≥n
    """
    from app.core.config import settings
    from app.utils.jwt import jwt_validator
    
    # Verificar configuraci√≥n b√°sica
    auth_configured = bool(settings.SUPABASE_JWT_SECRET)
    supabase_configured = bool(settings.SUPABASE_URL)
    
    status_ok = auth_configured and supabase_configured
    
    result = {
        "status": "healthy" if status_ok else "degraded",
        "auth_configured": auth_configured,
        "supabase_configured": supabase_configured,
        "jwt_validator_ready": jwt_validator is not None,
    }
    
    if not status_ok:
        logger.warning("‚ö†Ô∏è Sistema de autenticaci√≥n con configuraci√≥n incompleta")
        result["warnings"] = []
        
        if not auth_configured:
            result["warnings"].append("SUPABASE_JWT_SECRET not configured")
            
        if not supabase_configured:
            result["warnings"].append("SUPABASE_URL not configured")
    
    logger.debug(f"üè• Health check de autenticaci√≥n: {result['status']}")
    
    return result
